---
title: "データの出入力"
---
# データの読み込み
## CSVファイルの読み込み
データ解析の第一歩は、分析対象となるデータファイルを`R`に読み込むことである。`R`に読み込むデータのフォーマットはいくつかあるが、最も代表的なものはCSV（comma separated values）ファイルである。後述するように、`R`では他の統計解析パッケージ（SPSS, Stata, SASなど）のデータフォーマットも出入力することができるが、CSVは最も標準的なフォーマットであるがゆえに、まずは`R`におけるCSVの処理について習得することを勧める。

以下では[東大社研・若年パネル調査の非制限公開疑似データ](https://csrda.iss.u-tokyo.ac.jp/infrastructure/urd/jlps/)を例に、データファイルの読み込みを行ってみよう。

### `read.csv()`
`read.csv()`は`base`に組み込まれている関数であり、CSVファイルの読み込みに使うことができる。

```{r}
FN_OrgCSV <- "data/u001.csv"        # 読み込むCSVファイル名。パスの指定に注意。
DF_org <- read.csv(FN_OrgCSV)
print(DF_org[1:5, 1:10])       # 最初の5ケースについて1番目から10番目までの変数を表示
```

`read.csv()`で読み込まれたデータはデータフレームとしてオブジェクトに保存される。

```{r}
class(DF_org)
```

### `read_csv()`
CSVファイルの読み込みには`read.csv()`でも事足りるのであるが、特に{tidyverse}環境で作業を進める場合は`read_csv()`の方が相性が良い。これは{tidyverse}エコシステムの一部である{readr}の中の関数である。`read.csv()`と比較すると`read_csv()`の方がデータの読み込み速度が早く、大規模データを取り扱う際にも向いている関数である。

```{r}
# install.packages("tidyverse")  # 初回のみでよい
library(tidyverse)

FN_RawCSV <- "data/u001.csv"        # 読み込むCSVファイル名。パスの指定に注意。
DF_raw <- read_csv(FN_RawCSV)
print(DF_raw[1:5, 1:10])       # 最初の5ケースについて1番目から10番目までの変数を表示
```

`read_csv()`で読み込まれたデータは`tibble`という属性を持つ。`tibble`はデータフレームに非常に近いが、現時点では「`tidyverse`環境に最適化されたデータフレーム」として理解しておけば十分である。

```{r}
class(DF_raw)
```

## Excelファイルの読み込み

## 他の統計解析パッケージのデータファイルの読み込み


# データの書き出し
データ前処理やデータ分析がある程度進んだ段階、あるいは分析が完了した段階でデータを保存する必要が生じてくる。保存したいデータはデータフレーム（や`tibble`）、グラフ、多変量解析の分析結果などさまざまな形を取りうるが、ここではデータフレームの保存方法のみを取り上げる。その他の出力結果の保存方法については適宜説明する。

## CSVファイル
データをCSVファイルとして保存しておけば、`R`以外の統計解析パッケージやプログラミング言語を用いる人たちともデータのやり取りができる。そのため、最も汎用性が高いデータ保存フォーマットとしてCSVファイルを選択すべきであろう。データをCSVファイルとして出力するためには`write.csv()`あるいは`readr::write_csv()`を使う。いずれの関数も、1つ目の引数に保存するオブジェクト名を、2つ目の引数（`file`）に出力するファイル名を指定する。以下の例では`Output`というフォルダ内にCSVファイルを保存している。

```{r}
DF_Men <-   # データセットから男性のみを抽出
  DF_raw |> 
  filter(sex == 1)

write_csv(DF_Men, file = "DF_Men.csv")
```

`Output`フォルダを見てみると`DF_Men.csv`という名前のファイルが生成されているはずである。

## Rdataファイル
`R`を用いた分析で再利用したり、他の`R`ユーザーとデータを共有することが目的であれば`Rdata`ファイルでデータを保存しても良い。`Rdata`ファイルのメリットは**複数のオブジェクトを保存できる**ことである。例えば、データセットを性別で分割してそれぞれ`DF_Men`, `DF_Women`というオブジェクトに格納しておき、これら2つのデータセットを`Rdata`ファイルとして保存してみよう。

```{r}
DF_Women <-  # データセットから女性のみを抽出
  DF_raw |> 
  filter(sex == 2)  

save(DF_Men, DF_Women,  # DF_Menは前のセクションで定義している 
     file = "DF_bySex.Rdata")
```

`Output`フォルダに移ると、`DF_bySex.Rdata`という名前のファイルが保存されているはずである。

`Rdata`ファイルの読み込みには`load()`を用いる。`DF_bySex.Rdata`の中に`DF_Men`と`DF_Women`が問題なく保存されているかを確認してみよう。まずは、ここまでの作業で作ったオブジェクトを削除（リセット）するために`rm()`関数を用いる。この関数は引数に`list`を持っており、ここに削除したいオブジェクト名を引き渡す。全てのオブジェクトを削除したい場合は`list=ls()`とすれば良い。

```{r}
rm(list = ls())
```

`ls()`は作業ディレクトリ内のオブジェクト一覧を返す関数である。先に`rm(list = ls())`によってオブジェクトが全てリセットされているので、この段階で`ls()`を実行すると

```{r}
ls()
```

のように何も返ってこない。それでは、`DF_bySex.Rdata`を現在の作業ディレクトリに読み込んでみよう。

```{r}
load("DF_bySex.Rdata")
```

`RStudio`のEnviromentパネルをみると、`DF_Men`と`DF_Women`が表示されているはずである。`ls()`を実行してみても、

```{r}
ls()
```

のように、保存されたオブジェクト名が返ってくる。

## rdsファイル
上述のように、複数のオブジェクトを保存できることが`Rdata`ファイルのメリットである。しかしながら、これは特定のオブジェクトだけをワークスペース内にロードできないことを意味するため、同時にデメリットでもある。そこで、単一のオブジェクトを保存したり、ワークスペース内に読み込みたい場合は`rds`ファイルを利用するとよい。データを`rds`ファイルとして保存するためには`saveRDS()`を用いる。

```{r}
saveRDS(DF_Men, file = "DF_Men.rds")
```

`rds`ファイルの読み込みには`readRDS()`を用いる。先と同様に、作業ディレクトリ内の`DF_Men`を一度削除してから`rds`ファイルを読み込んでみよう。

```{r}
rm(list = "DF_Men")
ls()  # DF_Womenしか作業環境に残されていないことを確認
```

```{r}
DF_Men <- readRDS("DF_Men.rds")
ls()  # DF_Menが読み込まれている
```

なお、`rds`ファイルを読み込み際にはオブジェクトを定義してそこに格納する必要がある。そのため、`rds``ファイルとは異なる名前のオブジェクト名にデータを格納しても問題ない。例えば、

```{r}
data_Men <- readRDS("DF_Men.rds")
ls()  # オブジェクトdata_Menが追加されている
identical(DF_Men, data_Men) # DF_Menとdata_Menの中身は全く同じ
```

```{r}
#| echo: false
#| output: false
file.remove("DF_bySex.Rdata")
file.remove("DF_Men.csv")
file.remove("DF_Men.rds")

```