---
title: "単回帰分析"
---

```{r setup}
#| include: false
library(tidyverse)
library(ggthemes)
library(here)
```

# データ・変数
## データ
[東大社研・若年パネル調査の非制限公開疑似データ](https://csrda.iss.u-tokyo.ac.jp/infrastructure/urd/jlps/)を用いる。

```{r}
library(tidyverse)
FN_Data2Load <- "data/u001.csv"
DF_org <- read_csv(FN_Data2Load)
```

以下では次の問いに答えることを目的とする。

> Q: 個人収入が高いほど階層帰属意識が高いのか？

なお、今回は分析対象を**調査時点で就業している回答者**に限定する。

## 変数
- 回答者の個人収入: `ZQ47A`
  - 回答選択肢の中央値にリコード
  - 例：「100万円くらい（75〜150万円未満）」 -> 100万円

- 階層帰属意識: `ZQ35`
  - 1:一番上 〜　10:一番下
  - 10が「一番上」になるようにリコード

![](Figures/ZQ35.png)

```{r}
# 使用する変数のみを取り出す
DF_raw <-
  DF_org |> 
  select(ZQ47A, ZQ35, ZQ03, sex)

# 変数のリコード
DF_temp <-
  DF_raw |> 
  mutate(StatIden = case_when(ZQ35 == 99        ~ NA_integer_,
                              ZQ35 %in% c(1:10) ~ 11 - ZQ35),
         
         Income = case_match(ZQ47A,
                             1 ~    0,
                             2 ~   12.5,
                             3 ~   50,
                             4 ~  100,
                             5 ~  200,
                             6 ~  300,
                             7 ~  400,
                             8 ~  500,
                             9 ~  700,
                            10 ~ 1000,
                            11 ~ 1500,
                            12 ~ 2000,
                            13 ~ 2500,
                            c(14,99) ~ NA_real_)
  )

# 新規変数が意図した通りにリコードされているか確認
DF_temp |> 
  count(ZQ35, StatIden)

# 集計対象の限定
DF <-
  DF_temp |> 
  filter(ZQ03 == 1) |>   # 調査時点で就業している回答者に限定
  select(StatIden, Income)
```

# 分析
## 散布図の作成
はじめに、個人収入と階層帰属意識の散布図を書いてみよう。ここで注意すべきことは、「個人収入」も「階層帰属意識」も連続変数として便宜上取り扱うが、実際の測定においては離散的にしか観測されないことである。

例えば、「東大社研・若年パネル調査」では、回答者は自身の個人収入についてその金額を記入するのではなく、あらかじめプリコードされたカテゴリの中からひとつを選択する形式をとっている。そうして得られた回答に対して、回答選択肢の中間値を割り当てることで連続変数としてみなしているに過ぎない。

階層帰属意識も同様である。回答者は自身の社会的地位を表す数値として、1から10までの整数値の中からひとつを選択する。

このように、個人レベルでは測定が離散的にしかなされないことで、個人レベルのデータを用いて散布図を描くと、2変数で同じ値を取る客体が重なってプロットされてしまう。これでは2変数間の関係性を読み取りにくい。そこで、`jitter()`関数を用いて個々のケースにノイズを加えてから散布図を描くことで、2変数間の大まかな関係性を把握することができる。ただし、これは元データを恣意的にずらしていることになるので、`jitter()`で与えるノイズは大き過ぎないように注意する必要がある。

::: {.panel-tabset}
## 観測値をそのままプロット
```{r}
DF |> 
  ggplot(aes(x = Income,
             y = StatIden)) +
  geom_point() +
  scale_y_continuous(limits = c(1,10)) +
  scale_x_continuous(limits = c(0, 2000))

```
## geom_jitter()でずらす
```{r}
DF |> 
  ggplot(aes(x = Income,
             y = StatIden)) +
  geom_jitter(width = 40, height = 1) +
  scale_y_continuous(limits = c(1,10)) +
  scale_x_continuous(limits = c(0, 2000))
```
:::

## 単回帰分析
`R`において線形回帰分析を行うには`lm()`を用いる。引数として左辺に従属変数、右辺に説明変数を置き、両者をチルダ（`~`）でつなぐ。さらに、使用するデータフレームのオブジェクト名を`data`に引き渡す。

```{r}
DF |> 
  with(lm(StatIden ~ Income))
```


`lm()`コマンドの結果をそのまま出力させると、回帰式の切片と回帰係数のみが表示される。より詳しい推定結果を見るためには、回帰分析の結果を一度オブジェクトに格納するとよい。

```{r}
Result <- 
  DF |> 
  with(lm(StatIden ~ Income))
  
summary(Result)
```

推定結果が格納されたオブジェクトを`summary()`に引き渡すことで、残差の分布、回帰係数とp値、決定係数などの統計量が得られていることがわかる。なお、ある特定の統計量だけ取り出すこともできる。

```{r}
Result$coefficients
```
回帰分析の推定結果として他にどのような情報が格納されているかを確認するには`str()`に推定結果のオブジェクトを引き渡せばよい。

```{r}
str(Result)
```
あるいは、`lm()`のヘルプページの**Value**のセクションに返り値の一覧があるのでそちらも参考にすると良い。

# 散布図に回帰直線を追加する
散布図に回帰直線を引く方法はいくつかあるが、ひとつの方法は以下の通りである。

1. 回帰モデルを推定する
1. 1で推定した回帰モデルにもとづいて予測値を算出する
1. 観測値からなる散布図をプロットする
1. 2で作成した予測値を散布図に書き加える



```{r}
# 1. 回帰モデルを推定する
fm <- lm(StatIden ~ Income, data = DF)

# 2. 1で推定した回帰モデルにもとづいて予測値を算出する
xrange  <- seq(0, 2000, length.out = 200)
FittedVal <- predict(fm, data.frame(Income = xrange))

# 3. 観測値からなる散布図をプロットする
DF |> 
  with(
    plot(x = jitter(Income, 40), y = jitter(StatIden, 1),
         xlab = "Income",
         ylab = "Status Identification")
  )

# 4. 2で作成した予測値を散布図に書き加える
lines(xrange, FittedVal, 
      col = "darkred")
```




