---
title: "データハンドリングの基礎"
---

# 四則演算
```{r}
1 + 2

10 - 5

5 * 2

10 / 5

5 ^ 2

sqrt(25)
```

- `sqrt`は関数（function）のひとつ
  - これ以外にも数多くの関数が組み込まれている


# オブジェクト（object）
- 情報を格納するための「箱」のようなもの
  - 情報をオブジェクトに格納しておくと、あとで簡単に情報にアクセスできる

- オブジェクトには好きな名前をつけられる
  - ただしいくつかの制約がある
    - 数字から始められない
    - スペースは入れられない
    - 使えない文字がいくつかある（`%`や`$`など）

- オブジェクト名には日本語も使えるがおすすめしない
  - 他の２バイト文字（中国語・韓国語など）も同様

## オブジェクトの例
```{r}
Tashizan <- 1 + 2   # この場合は計算結果は出力されない
Tashizan            # オブジェクト名を入力すると出力される

print(Tashizan)     # printコマンドを使っても良い

(Tashizan <- 1 + 2) # 括弧で括ると結果も出力される
```

## 値の種類
- オブジェクトには様々な値を格納できる

- 値は**「数値」**と**「文字列」**の2つに大別できる
  - 厳密にはより詳細な区別が可能だがひとまず無視してOK
  
- 文字列として入力するには引用符で囲めば良い

# 数値と文字列
```{r, error = TRUE}
Suchi1 <- 1
Suchi2 <- 2

print(Suchi1)
print(Suchi2)

Suchi1 + Suchi2

Moji1 <- "1"
Moji2 <- "2"

print(Moji1)
print(Moji2)

Moji1 + Moji2  # 文字列として格納されている数を足し算することはできない
```

- オブジェクトの属性はクラス（class）という属性で区別される
- クラスを確認するためには関数`class`を使えば良い

```{r}
Suchi1 <- 1
Moji1  <- "1"

class(Suchi1)
class(Moji1)
```

# ベクトル（vector）
- 順序づけられた値の集合
- 関数`c()`で作成可能

```{r}
# 飲んだビールの量（ml）（月曜日-日曜日）
BeerConsume <- c(350, 350, 350, 350, 1000, 1000, 500)
BeerConsume

Youbi <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
Youbi
```

- ベクトルの要素を取り出したい時は角括弧（`[]`）を用いる
  - 角括弧の中に要素の番号を入れる
  - 番号にマイナスをつけるとその要素が除去される

```{r}
Youbi[2]
Youbi[c(1, 5)]
Youbi[-2]
Youbi[1:5]
Youbi[-c(1:5)]
```

- 異なるクラスの値をベクトルの中に混在させることはできない
  - 数値と文字列とを同じベクトルには格納できない
    - 全ての要素が文字列に変換されてしまう
  - リスト（list）ならば可能（後述）

```{r}
SuchiMoji <- c(350, 500, "Mon")
SuchiMoji
```

# 関数（function）
- オブジェクトを入力（input）として受け取り、何らかの出力（output）を返す
  - 関数に引き渡す入力のことを引数（ひきすう）（argument）と呼ぶ
  - 出力自体もひとつのオブジェクト

- Rには数え切れないほどの関数が組み込まれているが、ここでは代表的なものを紹介
- 自分で関数を定義することもできる

```{r}
# 平均値
mean(BeerConsume)

# 最小値
min(BeerConsume)

# 最大値
max(BeerConsume)

# 標準偏差
sd(BeerConsume)

# 合計値
sum(BeerConsume)

# 累積値
cumsum(BeerConsume)
```

- 引数を複数持つ関数も存在する
  - 例えば数列の作成に用いる`seq`関数
    - `from`  ：数列の最初の値
    - `to`    ：数列の最後の値
    - `by`    ：数列の公差

```{r}
seq(from = 1, to = 10, by = 2)
seq(1, 10, 2) # 引数の名前を省略した場合

# 2000年から2020年まで5年おきの年次を示すベクトルを作成したい場合
seq(from = 2000, to = 2020, by= 5)
```

# リスト（list）
- ベクトル
  - 同じ型の値（value）をまとめて並べたもの

- ベクトルには異なる水準の値を混在させることはできない
  - 「数値」と「文字」など
  - これを可能にするのがリスト

## リストの作成
リストの作成には`list`を用いる。

```{r}
ListSample <- list(c(1:3),
                   c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))

ListSample
```
上記の例では、`ListSample`は要素が2つのリストである。最初の要素は長さ3の数値ベクトル、もうひとつの要素は長さ7の文字ベクトルである。このように、リストには長さの異なるベクトルを格納することができる。

## リストの要素へのアクセス
リストの要素へのアクセスには`[[]]`を用いる。

```{r}
ListSample[[1]] # 1つめの要素
ListSample[[2]] # 2つめの要素
```

リストの要素には名前をつけることもできる。名前をつけておくとそのラベルを用いて要素へアクセスできる。
```{r}
names(ListSample) <- c("Numbers", "Days")
ListSample

ListSample$Numbers
```

## リストの活用例
リストにはデータの型や長さが異なるオブジェクトを格納することができるので、例えばこの授業に関する様々な情報をひとつのリストにまとめることもできる。

```{r}
ClassTitle  <- "数量データ分析"
Department  <- "社会学科"
Schedule    <- c("2024-09-20", "2024-09-27", "2024-10-04")
NofStudents <- 20

SocialStats <- list(ClassTitle  = ClassTitle,
                    Department  = Department,
                    Schedule    = Schedule,
                    NofStudents = NofStudents)

SocialStats
```



# データフレーム（dataframe）
- ベクトルには異なる水準の値を混在させることはできなかった（再）
  - 「数値」と「文字」など
  - リスト（list）に加え、これを可能にするのがデータフレーム

- データフレーム：複数のベクトルをひとつのオブジェクトに統合したもの
  - 列（カラム）が変数（variable）に相当する

- 例として、`R`に組み込まれているサンプルデータ`women`を読み込んでみる
  - `R`には数多くのサンプルデータが事前に保存されており、その一覧は`data()`で見ることができる
  - `women`: *Average Heights and Weights for American Women*

```{r}
women
class(women)
```

- 15名の身長（`height`）と体重（`weight`）がそれぞれベクトルとして格納されている
  - 1行目の女性は身長58インチ、体重115ポンド
  - 1行目の女性は身長59インチ、体重117ポンド

- このようにデータフレームを用いることで複数のベクトルを対応づけることができる
  - この例では2つの数値ベクトルがデータフレームに格納されている

- データフレームを作成する場合は`data.frame`関数を用いる

```{r}
# 最初にベクトルを作ってからデータフレームに統合する場合
BeerConsume <- c(350, 350, 350, 350, 1000, 1000, 500)
Youbi       <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")

DF <- data.frame(BeerConsume, Youbi)

# データフレームを作成する際にベクトルを定具することもできる
data.frame(BeerConsume = c(350, 350, 350, 350, 1000, 1000, 500),
           Youbi       = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))

```
- データフレームの要素にアクセスする場合は`$`演算子を用いる

```{r}
DF$BeerConsume
DF$Youbi

# 取り出された要素はベクトルなので、関数を適用したり、ベクトル内の要素にもアクセスできる
mean(DF$BeerConsume)
DF$Youbi[1:5]
```